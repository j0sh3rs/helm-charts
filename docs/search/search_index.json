{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the documentation for the bjw-s Helm charts project.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Helm must be installed to use the charts in this repository.</p> <p>Refer to Helm's documentation to get started.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>helm repo add bjw-s http://bjw-s.github.io/helm-charts/\n</code></pre> <p>You can then run <code>helm search repo bjw-s</code> to search the charts.</p>"},{"location":"#how-do-i-find-people-running-kubernetes-at-home","title":"How do I find people running Kubernetes at home?","text":""},{"location":"#discord","title":"Discord","text":"<p>Join the k8s-at-home Discord community on Discord.</p>"},{"location":"#repository-topics","title":"Repository topics","text":"<p>Have a look at people running Kubernetes at home on GitHub and</p>   <p>on GitLab.</p>"},{"location":"#awesome-home-kubernetes","title":"Awesome Home Kubernetes","text":"<p>Checkout our curation of projects and resources involving running Kubernetes at home.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the Apache 2.0 License license.</p>"},{"location":"app-template/introduction/","title":"App Template","text":""},{"location":"app-template/introduction/#background","title":"Background","text":"<p>Since Helm library charts cannot be installed directly I have created a companion chart for the common library.</p>"},{"location":"app-template/introduction/#usage","title":"Usage","text":"<p>In order to use this template chart, you would deploy it as you would any other Helm chart. By setting the desired values, the common library chart will render the desired resources.</p> <p>Be sure to check out the common library docs and its <code>values.yaml</code> for more information about the available configuration options.</p>"},{"location":"app-template/introduction/#examples","title":"Examples","text":"<p>This is an example <code>values.yaml</code> file that would deploy the vaultwarden application. For more deployment examples, check out the <code>examples</code> folder.</p> values.yaml<pre><code>image:\n  # -- image repository\n  repository: vaultwarden/server\n  # -- image pull policy\n  pullPolicy: IfNotPresent\n  # -- image tag\n  # this example is not automatically updated, so be sure to use the latest image\n  tag: 1.25.2\n\nstrategy:\n  type: Recreate\n\n# -- environment variables.\n# See [image docs](https://github.com/dani-garcia/vaultwarden/blob/main/.env.template) for more details.\nenv:\n  # -- Config dir\n  DATA_FOLDER: \"config\"\n\n# -- Configures service settings for the chart.\nservice:\n  main:\n    ports:\n      http:\n        port: 80\n      websocket:\n        enabled: true\n        port: 3012\n\ningress:\n  # -- Enable and configure ingress settings for the chart under this key.\n  main:\n    enabled: false\n    hosts:\n      - host: chart-example.local\n        paths:\n          - path: /\n            pathType: Prefix\n            service:\n              port: http\n          - path: /notifications/hub/negotiate\n            pathType: Prefix\n            service:\n              port: http\n          - path: /notifications/hub\n            pathType: Prefix\n            service:\n              port: websocket\n\n# -- Configure persistence settings for the chart under this key.\npersistence:\n  config:\n    enabled: true\n    type: pvc\n    accessMode: ReadWriteOnce\n    size: 1Gi\n    mountPath: /config\n</code></pre>"},{"location":"app-template/introduction/#source-code","title":"Source code","text":"<p>The source code for the app template chart can be found here.</p>"},{"location":"common-library/common-library-add-ons/","title":"Common library add-ons","text":"<p>The common library chart supplies a few add-ons which are meant to simplify some features you might be looking for. These are sidecars that run in the same pod as your application you configured it with.</p>"},{"location":"common-library/common-library-add-ons/#code-server","title":"Code Server","text":"<p>The code-server add-on can be used to access and modify persistent volume data in your application. This can be useful when you need to edit the persistent volume data, for example with Home Assistant.</p>"},{"location":"common-library/common-library-add-ons/#example-values","title":"Example values","text":"<p>Below is a snippet from a <code>values.yaml</code> using the add-on. More configuration options can be found in our common chart documentation.</p>  <p>Note</p> <p>This example will mount <code>/config</code> into the code-server sidecar.</p>  <pre><code>addons:\n  codeserver:\n    enabled: true\n    image:\n      repository: codercom/code-server\n      tag: 3.9.0\n    workingDir: \"/config\"\n    args:\n    - --auth\n    - \"none\"\n    - --user-data-dir\n    - \"/config/.vscode\"\n    - --extensions-dir\n    - \"/config/.vscode\"\n    ingress:\n      enabled: true\n      annotations:\n        kubernetes.io/ingress.class: \"nginx\"\n      hosts:\n      - host: app-config.domain.tld\n        paths:\n        - path: /\n          pathType: Prefix\n      tls:\n      - hosts:\n        - app-config.domain.tld\n    volumeMounts:\n    - name: config\n      mountPath: /config\n</code></pre>"},{"location":"common-library/common-library-storage/","title":"Common library Storage","text":"<p>This page describes the different ways you can attach storage to charts using the common library.</p>"},{"location":"common-library/common-library-storage/#types","title":"Types","text":"<p>These are the types of storage that are supported in the common library. Of course, other types are possible with the <code>custom</code> type.</p>"},{"location":"common-library/common-library-storage/#persistent-volume-claim","title":"Persistent Volume Claim","text":"<p>This is probably the most common storage type, therefore it is also the default when no <code>type</code> is specified.</p> <p>It can be attached in two ways.</p>"},{"location":"common-library/common-library-storage/#dynamically-provisioned","title":"Dynamically provisioned","text":"<p>Charts can be configured to create the required persistentVolumeClaim manifests on the fly.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>accessMode</code> Yes link   <code>size</code> Yes link   <code>mountPath</code> No Where to mount the volume in the main container. Defaults to <code>/&lt;name_of_the_volume&gt;</code>.   <code>readOnly</code> No Specify if the volume should be mounted read-only.   <code>nameOverride</code> No Override the name suffix that is used for this volume.   <code>storageClass</code> No Storage class to use for this volume.   <code>retain</code> No Set to true to retain the PVC upon <code>helm uninstall</code>.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: pvc\n    accessMode: ReadWriteOnce\n    size: 1Gi\n</code></pre> <p>This will create a 1Gi RWO PVC named <code>RELEASE-NAME-config</code> with the default storageClass, which will mount to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#existing-claim","title":"Existing claim","text":"<p>Charts can be configured to attach to a pre-existing persistentVolumeClaim.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>existingClaim</code> Yes Name of the existing PVC   <code>mountPath</code> No Where to mount the volume in the main container. Defaults to <code>/&lt;name_of_the_volume&gt;</code>.   <code>subPath</code> No Specifies a sub-path inside the referenced volume instead of its root.   <code>readOnly</code> No Specify if the volume should be mounted read-only.   <code>nameOverride</code> No Override the name suffix that is used for this volume.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: pvc\n    existingClaim: myAppData\n</code></pre> <p>This will mount an existing PVC named <code>myAppData</code> to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#empty-dir","title":"Empty Dir","text":"<p>Sometimes you need to share some data between containers, or need some scratch space. That is where an emptyDir can come in.</p> <p>See the Kubernetes docs for more information.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>medium</code> No Set this to <code>Memory</code> to mount a tmpfs (RAM-backed filesystem) instead of the storage medium that backs the node.   <code>sizeLimit</code> No If the <code>SizeMemoryBackedVolumes</code> feature gate is enabled, you can specify a size for memory backed volumes.   <code>mountPath</code> No Where to mount the volume in the main container. Defaults to <code>/&lt;name_of_the_volume&gt;</code>.   <code>nameOverride</code> No Override the name suffix that is used for this volume.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: emptyDir\n</code></pre> <p>This will create an ephemeral emptyDir volume and mount it to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#host-path","title":"Host path","text":"<p>In order to mount a path from the node where the Pod is running you can use a <code>hostPath</code> type persistence item.</p> <p>This can also be used to mount an attached USB device to a Pod. Note that this will most likely also require setting an elevated <code>securityContext</code>.</p> <p>See the Kubernetes docs for more information.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>hostPath</code> Yes Which path on the host should be mounted.   <code>hostPathType</code> No Specifying a hostPathType adds a check before trying to mount the path. See Kubernetes documentation for options.   <code>mountPath</code> No Where to mount the volume in the main container. Defaults to the value of <code>hostPath</code>.   <code>readOnly</code> No Specify if the volume should be mounted read-only.   <code>nameOverride</code> No Override the name suffix that is used for this volume.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: hostPath\n    hostPath: /dev\n</code></pre> <p>This will mount the <code>/dev</code> folder from the underlying host to <code>/dev</code> in the container.</p>"},{"location":"common-library/common-library-storage/#configmap","title":"configMap","text":"<p>In order to mount a configMap to a mount point within the Pod you can use the <code>configMap</code> type persistence item.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>name</code> Yes Which configMap should be mounted. Supports Helm templating.   <code>defaultMode</code> No The default file access permission bit.   <code>items</code> No Specify item-specific configuration. Will be passed 1:1 to the volumeSpec.   <code>readOnly</code> No Explicitly specify if the volume should be mounted read-only. Even if not specified, the configMap will be read-only.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: configMap\n    name: mySettings\n</code></pre> <p>This will mount the contents of the pre-existing <code>mySettings</code> configMap to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#secret","title":"Secret","text":"<p>In order to mount a Secret to a mount point within the Pod you can use the <code>secret</code> type persistence item.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>name</code> Yes Which Secret should be mounted. Supports Helm templating.   <code>defaultMode</code> No The default file access permission bit.   <code>items</code> No Specify item-specific configuration. Will be passed 1:1 to the volumeSpec.   <code>readOnly</code> No Explicitly specify if the volume should be mounted read-only. Even if not specified, the Secret will be read-only.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: secret\n    name: mySecret\n</code></pre> <p>This will mount the contents of the pre-existing <code>mySecret</code> Secret to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#nfs-volume","title":"NFS Volume","text":"<p>To mount an NFS share to your Pod you can either pre-create a persistentVolumeClaim referring to it, or you can specify an inline NFS volume:</p>  <p>Note</p> <p>Mounting an NFS share this way does not allow for specifying mount options. If you require these, you must create a PVC to mount the share.</p>     Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>server</code> Yes Host name or IP address of the NFS server.   <code>path</code> Yes The path on the server to mount.   <code>readOnly</code> No Explicitly specify if the volume should be mounted read-only. Even if not specified, the Secret will be read-only.    <p>Minimal config:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: nfs\n    server: 10.10.0.8\n    path: /tank/nas/library\n</code></pre> <p>This will mount the NFS share <code>/tank/nas/library</code> on server <code>10.10.0.8</code> to <code>/config</code>.</p>"},{"location":"common-library/common-library-storage/#custom","title":"Custom","text":"<p>When you wish to specify a custom volume, you can use the <code>custom</code> type. This can be used for example to mount configMap or Secret objects.</p> <p>See the Kubernetes docs for more information.</p>    Field Mandatory Docs / Description     <code>enabled</code> Yes    <code>type</code> Yes    <code>volumeSpec</code> Yes Define the raw Volume spec here.   <code>mountPath</code> No Where to mount the volume in the main container. Defaults to the value of <code>hostPath</code>.   <code>readOnly</code> No Specify if the volume should be mounted read-only.   <code>nameOverride</code> No Override the name suffix that is used for this volume."},{"location":"common-library/common-library-storage/#permissions","title":"Permissions","text":"<p>Charts do not modify file or folder permissions on volumes out of the box.</p> <p>This means that you will have to make sure that your storage can be written to by the application.</p>"},{"location":"common-library/common-library-storage/#multiple-subpaths-for-1-volume","title":"Multiple subPaths for 1 volume","text":"<p>It is possible to mount multiple subPaths from the same volume to the main container. This can be achieved by specifying <code>subPath</code> with a list instead of a string.</p>  <p>Note</p> <p>It is not possible to define <code>mountPath</code> at the top level when using this feature</p>  <p>Examples:</p> <pre><code>persistence:\n  config:\n    enabled: true\n    type: custom\n    volumeSpec:\n      configMap:\n        name: myData\n    subPath:\n      - path: myFirstScript.sh\n        mountPath: /data/myFirstScript.sh\n      - path: myCertificate.pem\n        mountPath: /certs/myCertificate.pem\n        readOnly: true\n</code></pre> <pre><code>persistence:\n  config:\n    enabled: true\n    type: pvc\n    existingClaim: myAppData\n    subPath:\n      - path: .\n        mountPath: /my_media\n      - path: Series\n        mountPath: /series\n      - path: Downloads\n        mountPath: /downloads\n</code></pre>"},{"location":"common-library/introduction/","title":"Common library","text":"<p>Note</p> <p>The Common library chart is not meant to be installed directly, application charts use the Common library as a dependency. See the app template for an example how to deploy it.</p>"},{"location":"common-library/introduction/#background","title":"Background","text":"<p>In Helm 3, their team introduced the concept of a Library chart.</p>  <p>A library chart is a type of Helm chart that defines chart primitives or   definitions which can be shared by Helm templates in other charts. This   allows users to share snippets of code that can be re-used across charts,   avoiding repetition and keeping charts DRY.</p>  <p>The common library was created because I saw many charts requiring only a few select configuration options in their Helm charts.</p>  <p>Note</p> <p>Take one of the many applications like <code>sonarr</code> or <code>nzbget</code>. Each of these charts only require setting <code>service</code>, <code>port</code>, <code>persistence</code>, <code>ingress</code> and <code>image</code> since state and app configuration is handled by the application itself.</p>  <p>In order to stay somewhat DRY (Don't Repeat Yourself) and keeping with Helm 3 usage for a Library chart, I saw this pattern and decided it was worth it to create a library. This means each one of these app charts has a dependency on what we call the <code>common</code> library.</p>"},{"location":"common-library/introduction/#source-code","title":"Source code","text":"<p>The source code for the common library chart can be found here.</p>"}]}